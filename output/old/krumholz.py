#!/usr/bin/env python

from pylab import *
from scipy import integrate
from scipy import exp
from scipy import Inf
from numpy import arange
from numpy import log10
import math

matplotlib.rcdefaults()
plt.rc('axes', color_cycle=['k', 'b', 'r', 'g', 'm', '0.5', ], labelsize='x-large')
plt.rc('xtick', labelsize='x-large')
plt.rc('ytick', labelsize='x-large')
plt.rc('lines', linewidth='2.0')
plt.rc('font', variant='monospace')
plt.rc('legend', numpoints=1, fontsize='x-large')
plt.rc('text', usetex=True)


def myfunc1(q, Xi, gamma):
  return q * pow(exp(-q), 0.33*gamma+1.) * (1. - 0.75 * (Xi / (exp(-q) + 0.25*Xi)) )

def fitfunc(x, a, b, c, d):
  return a * (math.tanh(b*x + c)) + d


x = arange(0.0, 2.0, 0.1)
plot(x, 1-0.75*(x/(1.+.25*x)))


# args = (0.002, 1.0)
# results2 = integrate.quad(myfunc1, 0.0, Inf, args)
# print 'Integral 2 = ', results2[0], ' with error = ', results2[1]

# axis([0.0, 10.0, -0.025, 0.28])
# x = arange(0.0, 100.0, 0.1)

# plot(x, myfunc1(x, 0.002, 1.0), 'b-')
# args = (0.002, 1.0)
# results = integrate.quad(myfunc1, 0.0, Inf, args)
# print 'Integral = ', results[0], ' with error = ', results[1]


# minimum = 8.0
# Xi_use = pow(10.0, arange(0.0, minimum+1.0, 0.1)-minimum)
# Xi_val = []
# 
# Integral_gamma_one_val = []
# Integral_gamma_minus_one_val = []
# 
# for i in Xi_use:
#   result = integrate.quad(myfunc1, 0.0, Inf, (i, 1.0))
#   Integral_gamma_one_val.append(result[0])
#   result = integrate.quad(myfunc1, 0.0, Inf, (i, -1.0))
#   Integral_gamma_minus_one_val.append(result[0])
#   Xi_val.append(i)
# 
# axis([-1.0*minimum, 0.0, 0.0, 2.4])
# plot(log10(Xi_val), Integral_gamma_one_val, 'b-', lw=5.0)
# plot(log10(Xi_val), Integral_gamma_minus_one_val, 'r-', lw=5.0)
# 
# a = -7.5173162393707260E-01
# b =  9.6023793327783258E-01
# c =  1.1727438208165793E-01
# d = -1.8616635095385453E-01
# plot(log10(Xi_val), [fitfunc(log10(y), a, b, c, d) for y in Xi_val])
# 
# a = -3.7367853464085394E+00
# b = 6.2039554015799925E-01
# c = 2.3833373737104396E-01
# d = -1.5073935936540572E+00
# plot(log10(Xi_val), [fitfunc(log10(y), a, b, c, d) for y in Xi_val])


# for i in Xi_val:
#   print log10(i)
# for i in Integral_gamma_minus_one_val:
#   print i

# plot(Xi_val, [1.0/y for y in Integral_gamma_one_val], 'b-')
# (a, b) = polyfit(Xi_val, [1.0/y for y in Integral_gamma_one_val], 1)
# print a, b
# plot(Xi_use, 1.0/(a*Xi_use+b), 'g-')

show()



# OLD

# def myfunc2(r, Rd, Xi, gamma):
#   return r/(Rd*Rd) * pow(exp(-r/Rd), 0.33*gamma+1.) * (1. - 0.75 * (Xi/exp(-r/Rd)) / (1.+0.25*(Xi / exp(-r/Rd))) )

# args = (1.0, 0.002, 1.0)
# results1 = integrate.quad(myfunc2, 0.0, Inf, args, epsabs=1.0)
# print 'Integral 1 = ', results1[0], ' with error = ', results1[1]
  
# Rd_use = arange(0.0, 1000.0, 0.1)
# Xi_use = 0.002
# gamma_use = 1.0
# 
# for i in Rd_use:
#   args = (i, Xi_use, gamma_use)
#   results = integrate.quad(myfunc2, 0.0, Inf, args, epsabs=1.0)
#   print Rd_use[i], Xi_use, gamma_use, results[0], results[1]
  
  
# Rd_use = 3.0
# Xi_use = arange(1.0, 10000.0, 1.0)
# gamma_use = 1.0
# 
# for i in Xi_use:
#   args = (Rd_use, Xi_use[i]/10000.0, gamma_use)
#   results = integrate.quad(myfunc2, 0.0, Inf, args, epsabs=1.0)
#   print Rd_use, Xi_use[i]/10000.0, gamma_use, results[0], results[1]

  
# axis([0.0, 15.0, -0.025, 0.28])
# x = arange(0.0, 100.0, 0.1)
# 
# plot(x, myfunc2(x, 1.0, 0.002, 1.0), 'b-')
# args = (1.0, 0.002, 1.0)
# results = integrate.quad(myfunc2, 0.0, Inf, args, epsabs=1.0)
# print 'Integral = ', results[0], ' with error = ', results[1]
# 
# plot(x, myfunc2(x, 2.0, 0.002, 1.0), 'r-')
# args = (2.0, 0.002, 1.0)
# results = integrate.quad(myfunc2, 0.0, Inf, args, epsabs=1.0)
# print 'Integral = ', results[0], ' with error = ', results[1]
# 
# plot(x, myfunc2(x, 5.0, 0.002, 1.0), 'g-')
# args = (5.0, 0.002, 1.0)
# results = integrate.quad(myfunc2, 0.0, Inf, args, epsabs=1.0)
# print 'Integral = ', results[0], ' with error = ', results[1]
# 
# show()



# y = a(tanh(bx+c)) + Offset
# 
# Fitting target of sum of squared absolute error = 1.5842782721652211E-05
# 
# a = -7.5173162393707260E-01
# b =  9.6023793327783258E-01
# c =  1.1727438208165793E-01
# Offset = -1.8616635095385453E-01

# -8.0      0.56532301413
# -7.9      0.565322996593
# -7.8      0.56532297454
# -7.7      0.565322946812
# -7.6      0.565322911948
# -7.5      0.565322868118
# -7.4      0.56532281302
# -7.3      0.565322743761
# -7.2      0.565322656714
# -7.1      0.565322547323
# -7.0      0.565322409865
# -6.9      0.565322237164
# -6.8      0.565322020208
# -6.7      0.565321747698
# -6.6      0.565321405458
# -6.5      0.565320975713
# -6.4      0.565320436179
# -6.3      0.565319758929
# -6.2      0.565318908971
# -6.1      0.565317842477
# -6.0      0.565316504568
# -5.9      0.565314825572
# -5.8      0.565312722479
# -5.7      0.56531008485
# -5.6      0.565306779265
# -5.5      0.565302637774
# -5.4      0.565297450598
# -5.3      0.565290955844
# -5.2      0.565282826738
# -5.1      0.565272655787
# -5.0      0.565259935149
# -4.9      0.565244032345
# -4.8      0.565224160212
# -4.7      0.565199339816
# -4.6      0.565168354698
# -4.5      0.565129694533
# -4.4      0.565081485855
# -4.3      0.56502140701
# -4.2      0.564946583944
# -4.1      0.564853462752
# -4.0      0.564737654128
# -3.9      0.564593743979
# -3.8      0.564415063382
# -3.7      0.564193409964
# -3.6      0.563918711418
# -3.5      0.563578620502
# -3.4      0.563158029321
# -3.3      0.562638489162
# -3.2      0.561997520591
# -3.1      0.56120779717
# -3.0      0.560236185049
# -2.9      0.559042620161
# -2.8      0.557578805056
# -2.7      0.555786708992
# -2.6      0.553596858289
# -2.5      0.550926409841
# -2.4      0.547677009928
# -2.3      0.543732454103
# -2.2      0.538956183114
# -2.1      0.533188676017
# -2.0      0.52624483611
# -1.9      0.517911509507
# -1.8      0.507945331148
# -1.7      0.496071159117
# -1.6      0.481981434663
# -1.5      0.465336889572
# -1.4      0.445769109042
# -1.3      0.422885537533
# -1.2      0.396277572282
# -1.1      0.365532402958
# -1.0      0.330249197305
# -0.9      0.290060065606
# -0.8      0.2446559204
# -0.7      0.193816842501
# -0.6      0.137445842492
# -0.5      0.0756039713336
# -0.4      0.00854364180495
# -0.3      -0.0632640862231
# -0.2      -0.139113385219
# -0.1      -0.218064139749
# 0.0       -0.298963791633
# 0.1       -0.380493325203
# 0.2       -0.461236762347
# 0.3       -0.539769078272
# 0.4       -0.614752869708
# 0.5       -0.685030789417
# 0.6       -0.749700086875
# 0.7       -0.808158288096
# 0.8       -0.860114645325
# 0.9       -0.905568848406


# y = a(tanh(bx+c)) + Offset
# 
# Fitting target of sum of squared absolute error = 1.2158767830181176E-04
# 
# a = -3.7367853464085394E+00
# b =  6.2039554015799925E-01
# c =  2.3833373737104396E-01
# Offset = -1.5073935936540572E+00

# -8.0      2.22732867276
# -7.9      2.2272771974
# -7.8      2.22721797996
# -7.7      2.22714986974
# -7.6      2.22707154748
# -7.5      2.2269815012
# -7.4      2.22687799861
# -7.3      2.22675905561
# -7.2      2.22662240051
# -7.1      2.22646543326
# -7.0      2.22628517906
# -6.9      2.22607823567
# -6.8      2.22584071352
# -6.7      2.22556816771
# -6.6      2.22525552095
# -6.5      2.22489697609
# -6.4      2.22448591715
# -6.3      2.22401479732
# -6.2      2.22347501222
# -6.1      2.2228567569
# -6.0      2.22214886437
# -5.9      2.22133862361
# -5.8      2.2204115747
# -5.7      2.21935127836
# -5.6      2.2181390572
# -5.5      2.21675370541
# -5.4      2.21517116369
# -5.3      2.21336415571
# -5.2      2.21130178231
# -5.1      2.20894906922
# -5.0      2.20626646417
# -4.9      2.20320927869
# -4.8      2.19972707003
# -4.7      2.19576295853
# -4.6      2.19125287567
# -4.5      2.18612473825
# -4.4      2.18029754458
# -4.3      2.17368038868
# -4.2      2.16617138975
# -4.1      2.15765653477
# -4.0      2.14800843374
# -3.9      2.13708498895
# -3.8      2.12472798209
# -3.7      2.110761586
# -3.6      2.09499081198
# -3.5      2.07719990821
# -3.4      2.05715073075
# -3.3      2.0345811158
# -3.2      2.00920329044
# -3.1      1.98070236916
# -3.0      1.94873499555
# -2.9      1.91292820248
# -2.8      1.87287857988
# -2.7      1.8281518578
# -2.6      1.7782830326
# -2.5      1.72277718656
# -2.4      1.66111117572
# -2.3      1.59273638582
# -2.2      1.51708278235
# -2.1      1.43356450487
# -2.0      1.34158727762
# -1.9      1.24055792365
# -1.8      1.12989627558
# -1.7      1.0090497667
# -1.6      0.877510955565
# -1.5      0.734838176582
# -1.4      0.580679408989
# -1.3      0.414799304229
# -1.2      0.237109094982
# -1.1      0.0476988137352
# -1.0      -0.153129136591
# -0.9      -0.364826499501
# -0.8      -0.586567783758
# -0.7      -0.817223644596
# -0.6      -1.05534235403
# -0.5      -1.29914328262
# -0.4      -1.546526697
# -0.3      -1.79510414492
# -0.2      -2.0422530066
# -0.1      -2.28519718361
# 0.0       -2.52111319812
# 0.1       -2.74725721373
# 0.2       -2.96110404575
# 0.3       -3.16048494351
# 0.4       -3.34370804342
# 0.5       -3.50964524468
# 0.6       -3.65777272321
# 0.7       -3.78815918189
# 0.8       -3.90140473072
# 0.9       -3.99854156813


